#!/usr/bin/env python
import sys
import fortran

#conditional = {
#    'alk':  ('#ifdef ALLOW_CARBON\n', '\n#endif'),
#    'o2':   ('#ifdef ALLOW_CARBON\n', '\n#endif'),
#    'cdom': ('#ifdef ALLOW_CDOM\n', '\n#endif'),
#}

print '''C $Header$
C $Name$

C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!!!!!!!!!!!! AUTOGENERATED FILE -- WILL BE OVERWRITTEN !!!!!!!!!!!!!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#include "GUD_OPTIONS.h"

      SUBROUTINE GUD_CHECK( myThid )
C     /==========================================================\
C     | SUBROUTINE GUD_CHECK                                  |
C     | o Check dependences with other packages:                 |
C     |   Print gud indices (iDIC,...) and ptracer names      |
C     |   to allow for manual check                              |
C     \==========================================================/
      IMPLICIT NONE

C     === Global variables ===
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "PTRACERS_SIZE.h"
#include "PTRACERS_PARAMS.h"
#include "GCHEM.h"
#include "GUD_SIZE.h"
#include "GUD_INDICES.h"

C     === Routine arguments ===
C     myThid -  Number of this instances
      INTEGER myThid

#ifdef ALLOW_GUD

C     === Local variables ===
C     msgBuf      - Informational/error meesage buffer
      CHARACTER*(MAX_LEN_MBUF) msgBuf
      INTEGER j,iPtr

      WRITE(msgBuf,'(A)') 'GUD_CHECK: #define ALLOW_GUD'
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

#ifdef ALLOW_EXF
      IF ( useEXF ) THEN
#else
      IF (.FALSE.) THEN
#endif
C       ok
      ELSE
        WRITE(msgBuf,'(A)')
     & 'GUD_CHECK: ERROR: gud requires the exf package to be on'
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R GUD_CHECK'
      ENDIF

      IF ( nGud .GT. PTRACERS_num ) THEN
        WRITE(msgBuf,'(A,I5,A,I5)')
     &    'GUD_CHECK: ERROR: nGud > PTRACERS_num: ',
     &    nGud,' vs ',PTRACERS_num
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R GUD_CHECK'
      ENDIF

      WRITE(msgBuf,'(A)') 'GUD_CHECK: iPtr gud   PTRACERS_names'
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)'''

p,conds = fortran.readparameters('GUD_SIZE.h', 'GUD_INDICES.h', conditions=True)
conditional = {}
for k,v in conds.items():
    v = [c for c in v if not c.endswith('ALLOW_GUD\n')]
    if k[0] == 'i' and len(v):
        conditional[k[1:]] = (''.join(v), len(v)*'\n#endif')

for k in p:
    if k[0] == 'i' and k[1:4] not in ['Min', 'Max']:
        name = k[1:]
        pre,suf = conditional.get(name.lower(), ('', ''))
        if 'e'+name in p:
            print '''
{pre}      DO j = 1, e{0}+1-i{0}
        iPtr = i{0} + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I1,A,A32)') 'GUD_CHECK: ',
     &    iPtr, '{0:5s}(',j,') ', PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO{suf}'''.format(name, pre=pre, suf=suf)
        else:
            print '''
{pre}      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  i{0:6s},'{0:6s}   ', PTRACERS_names(i{0:6s})
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid){suf}'''.format(name, pre=pre, suf=suf)

print '''
#endif /* ALLOW_GUD */
       
      RETURN
      END
'''

