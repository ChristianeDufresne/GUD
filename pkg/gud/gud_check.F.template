C $Header$
C $Name$

{{ EDIT_THIS_FILE }}

#include "GUD_OPTIONS.h"

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
CBOP 0
C     !ROUTINE: GUD_CHECK

C     !INTERFACE:
      SUBROUTINE GUD_CHECK( myThid )

C     !DESCRIPTION:
C     Check dependences with other packages:
C     o Print gud indices (iDIC,...) and ptracer names
C     o to allow for manual check

C     !USES:
      IMPLICIT NONE
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "PTRACERS_SIZE.h"
#include "PTRACERS_PARAMS.h"
#include "GCHEM.h"
#include "GUD_SIZE.h"
#include "GUD_INDICES.h"
#include "GUD_TRAITS.h"

C     !INPUT PARAMETERS:
C     myThid -  Number of this instances
      INTEGER myThid
CEOP

#ifdef ALLOW_GUD

C     !LOCAL VARIABLES:
C     msgBuf      - Informational/error meesage buffer
      CHARACTER*(MAX_LEN_MBUF) msgBuf
      INTEGER j,jz,iPtr

      _BEGIN_MASTER(myThid)

      WRITE(msgBuf,'(A)') 'GUD_CHECK: #define ALLOW_GUD'
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

C check exf is compiled and used
#ifdef ALLOW_EXF
      IF ( .NOT. useEXF ) THEN
#else
      IF (.TRUE.) THEN
#endif
        WRITE(msgBuf,'(A)')
     & 'GUD_CHECK: ERROR: gud requires the exf package to be on'
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R GUD_CHECK'
      ENDIF

      IF ( nGud .GT. PTRACERS_num ) THEN
        WRITE(msgBuf,'(A,I5,A,I5)')
     &    'GUD_CHECK: ERROR: nGud > PTRACERS_num: ',
     &    nGud,' vs ',PTRACERS_num
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R GUD_CHECK'
      ENDIF

C check all required palat are set
      DO jz=iMinPred,iMaxPred
       DO j=iMinPrey,iMaxPrey
        IF (palat(j,jz) .LT. 0.0 _d 0) THEN
         WRITE(msgBuf,'(A,I5,A,I5)')
     &    'GUD_CHECK: ERROR: palat negative for pred ',jz,' prey ',j
         CALL PRINT_ERROR( msgBuf , 1)
         STOP 'ABNORMAL END: S/R GUD_CHECK'
        ENDIF
       ENDDO
      ENDDO

C log tracer names together with what they should be
      WRITE(msgBuf,'(A)') 'GUD_CHECK: iPtr gud   PTRACERS_names'
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
{% for name,name6,cond1,cond2 in flds %}
{{cond1}}      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  i{{name6}},'{{name6}}   ', PTRACERS_names(i{{name6}})
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
{{cond2}}{% end %}{% for name,name5,cond1,cond2 in lflds %}
{{cond1}}      DO j = 1, e{{name}}+1-i{{name}}
        iPtr = i{{name}} + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I1,A,A32)') 'GUD_CHECK: ',
     &    iPtr, '{{name5}}(',j,') ', PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
{{cond2}}{% end %}
      _END_MASTER(myThid)

#endif /* ALLOW_GUD */

      RETURN
      END

