C $Header$
C $Name$

C This file contains cog templates.
C Code between template and end marker is autogenerated.
C Add new forcing fields to exfflds in defs.py
C
CCOG[[[cog import cog; from defs import *]]]
CCOG[[[end]]] (checksum: d41d8cd98f00b204e9800998ecf8427e)

#include "GUD_OPTIONS.h"
#include "EXF_OPTIONS.h"

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
CBOP
C     !ROUTINE: GUD_EXF_INIT_FIXED

C     !INTERFACE:
      SUBROUTINE GUD_EXF_INIT_FIXED( myThid )

C     !DESCRIPTION:
C     Initialize GUD constants for exf field loading

C     !USES:
      IMPLICIT NONE
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "EXF_PARAM.h"
#include "GUD_SIZE.h"
#include "GUD_EXF.h"

C     !INPUT PARAMETERS:
      INTEGER myThid
CEOP

#ifdef ALLOW_GUD
#ifdef ALLOW_EXF

#ifdef GUD_ALLOW_RADTRANS
      IF ( OASIM_Edfile(1) .NE. ' ' .AND. OASIMperiod .GT. 0. ) THEN
# ifdef ALLOW_DEBUG
       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START OASIM',myThid)
# endif
       CALL EXF_GETFIELD_START( useGudYearlyFields,
     I                          OASIMstartdate1, OASIMstartdate2,
     O                          OASIMstartdate,
     I                          myThid )
      ENDIF
#endif
CCOG[[[cog
CCOGfor fld,pre in exfflds:
CCOG    cog.out('''
CCOG      IF ( {pre}file .NE. ' ' .AND. {pre}period .GT. 0. ) THEN
CCOG# ifdef ALLOW_DEBUG
CCOG       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START {pre}',myThid)
CCOG# endif
CCOG       CALL EXF_GETFIELD_START( useGudYearlyFields,
CCOG     I                          {pre}startdate1, {pre}startdate2,
CCOG     O                          {pre}startdate,
CCOG     I                          myThid )
CCOG      ENDIF
CCOG'''.format(pre=pre, fld=fld))
CCOG]]]

      IF ( PARfile .NE. ' ' .AND. PARperiod .GT. 0. ) THEN
# ifdef ALLOW_DEBUG
       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START PAR',myThid)
# endif
       CALL EXF_GETFIELD_START( useGudYearlyFields,
     I                          PARstartdate1, PARstartdate2,
     O                          PARstartdate,
     I                          myThid )
      ENDIF

      IF ( ironfile .NE. ' ' .AND. ironperiod .GT. 0. ) THEN
# ifdef ALLOW_DEBUG
       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START iron',myThid)
# endif
       CALL EXF_GETFIELD_START( useGudYearlyFields,
     I                          ironstartdate1, ironstartdate2,
     O                          ironstartdate,
     I                          myThid )
      ENDIF

      IF ( icefile .NE. ' ' .AND. iceperiod .GT. 0. ) THEN
# ifdef ALLOW_DEBUG
       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START ice',myThid)
# endif
       CALL EXF_GETFIELD_START( useGudYearlyFields,
     I                          icestartdate1, icestartdate2,
     O                          icestartdate,
     I                          myThid )
      ENDIF

      IF ( windfile .NE. ' ' .AND. windperiod .GT. 0. ) THEN
# ifdef ALLOW_DEBUG
       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START wind',myThid)
# endif
       CALL EXF_GETFIELD_START( useGudYearlyFields,
     I                          windstartdate1, windstartdate2,
     O                          windstartdate,
     I                          myThid )
      ENDIF

      IF ( pCO2file .NE. ' ' .AND. pCO2period .GT. 0. ) THEN
# ifdef ALLOW_DEBUG
       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START pCO2',myThid)
# endif
       CALL EXF_GETFIELD_START( useGudYearlyFields,
     I                          pCO2startdate1, pCO2startdate2,
     O                          pCO2startdate,
     I                          myThid )
      ENDIF
CCOG[[[end]]] (checksum: 01d787481b1872b934b693cf5a4c8f8b)

#endif /* ALLOW_EXF */
#endif /* ALLOW_GUD */

      RETURN
      END
