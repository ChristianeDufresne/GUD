C$Header$
C$Name$

C This file contains cog templates.
C Code between template and end marker is autogenerated.
C Add new parameters to traits.py
C
CCOG[[[cog import cog; from traits import *]]]
CCOG[[[end]]] (checksum: d41d8cd98f00b204e9800998ecf8427e)

#ifdef ALLOW_GUD

CBOP
C     !ROUTINE: GUD_TRAITS.h
C     !INTERFACE:
C #include GUD_TRAITS.h

C     !DESCRIPTION:
C Contains run-time parameters for the gud package
C the parameters in this file are traits
C
C Requires: GUD_SIZE.h

      INTEGER UNINIT_I
      _RL UNINIT_RL
      PARAMETER(UNINIT_I  = -999999999)
      PARAMETER(UNINIT_RL = -999999999 _d 0)
      
CCOG[[[cog
CCOGfor name,(coms,conds,conde) in coms.items():
CCOG    cog.out(conds)
CCOG    for sfx,decl in coms.items():
CCOG        cog.out('''
CCOG      COMMON /{name}/
CCOG'''.format(name=name+sfx)[1:])
CCOG        cog.out(',\n'.join('''
CCOG{pre}     &    {param}
CCOG{post}'''.format(param=param,pre=pre,post=post)[1:-1] for tp,dims,param,pre,post in decl))
CCOG        for tp,dims,param,pre,post in decl: cog.out('''
CCOG{pre}      {tp} {param}{dims}
CCOG{post}'''.format(param=param, tp=tp, dims=dims, pre=pre, post=post)[:-1])
CCOG        cog.out('\n')
CCOG    cog.out(conde)
CCOG    cog.out('\n')
CCOG]]]
      COMMON /GUD_TRAITS_i/
     &    hasSi,
     &    hasPIC,
     &    diazo,
     &    useNH4,
     &    useNO2,
     &    useNO3,
     &    combNO,
     &    tempMort,
     &    tempMort2
      INTEGER hasSi(nplank)
      INTEGER hasPIC(nplank)
      INTEGER diazo(nplank)
      INTEGER useNH4(nplank)
      INTEGER useNO2(nplank)
      INTEGER useNO3(nplank)
      INTEGER combNO(nplank)
      INTEGER tempMort(nplank)
      INTEGER tempMort2(nplank)
      COMMON /GUD_TRAITS_r/
     &    Xmin,
     &    amminhib,
     &    acclimtimescl,
     &    mort,
     &    mort2,
     &    ExportFracMort,
     &    ExportFracMort2,
     &    ExportFrac,
     &    phytoTempCoeff,
     &    phytoTempExp1,
     &    phytoTempExp2,
     &    phytoTempOptimum,
     &    phytoDecayPower,
     &    R_NC,
     &    R_PC,
     &    R_SiC,
     &    R_FeC,
     &    R_ChlC,
     &    R_PICPOC,
     &    wsink,
     &    wswim,
     &    respiration,
     &    PCmax,
     &    Qnmax,
     &    Qnmin,
     &    Qpmax,
     &    Qpmin,
     &    Qsimax,
     &    Qsimin,
     &    Qfemax,
     &    Qfemin,
     &    Vmax_NH4,
     &    Vmax_NO2,
     &    Vmax_NO3,
     &    Vmax_N,
     &    Vmax_PO4,
     &    Vmax_SiO2,
     &    Vmax_FeT,
     &    ksatNH4,
     &    ksatNO2,
     &    ksatNO3,
     &    ksatPO4,
     &    ksatSiO2,
     &    ksatFeT,
     &    kexcC,
     &    kexcN,
     &    kexcP,
     &    kexcSi,
     &    kexcFe,
#ifdef GUD_ALLOW_GEIDER
     &    inhibcoef_geid,
#else
     &    ksatPAR,
     &    kinhPAR,
#endif
     &    mQyield,
     &    chl2cmax,
     &    grazemax,
     &    kgrazesat,
     &    palat,
     &    asseff,
     &    ExportFracPreyPred
      _RL Xmin(nplank)
      _RL amminhib(nplank)
      _RL acclimtimescl(nplank)
      _RL mort(nplank)
      _RL mort2(nplank)
      _RL ExportFracMort(nplank)
      _RL ExportFracMort2(nplank)
      _RL ExportFrac(nplank)
      _RL phytoTempCoeff(nplank)
      _RL phytoTempExp1(nplank)
      _RL phytoTempExp2(nplank)
      _RL phytoTempOptimum(nplank)
      _RL phytoDecayPower(nplank)
      _RL R_NC(nplank)
      _RL R_PC(nplank)
      _RL R_SiC(nplank)
      _RL R_FeC(nplank)
      _RL R_ChlC(nplank)
      _RL R_PICPOC(nplank)
      _RL wsink(nplank)
      _RL wswim(nplank)
      _RL respiration(nplank)
      _RL PCmax(nplank)
      _RL Qnmax(nplank)
      _RL Qnmin(nplank)
      _RL Qpmax(nplank)
      _RL Qpmin(nplank)
      _RL Qsimax(nplank)
      _RL Qsimin(nplank)
      _RL Qfemax(nplank)
      _RL Qfemin(nplank)
      _RL Vmax_NH4(nplank)
      _RL Vmax_NO2(nplank)
      _RL Vmax_NO3(nplank)
      _RL Vmax_N(nplank)
      _RL Vmax_PO4(nplank)
      _RL Vmax_SiO2(nplank)
      _RL Vmax_FeT(nplank)
      _RL ksatNH4(nplank)
      _RL ksatNO2(nplank)
      _RL ksatNO3(nplank)
      _RL ksatPO4(nplank)
      _RL ksatSiO2(nplank)
      _RL ksatFeT(nplank)
      _RL kexcC(nplank)
      _RL kexcN(nplank)
      _RL kexcP(nplank)
      _RL kexcSi(nplank)
      _RL kexcFe(nplank)
#ifdef GUD_ALLOW_GEIDER
      _RL inhibcoef_geid(nplank)
#else
      _RL ksatPAR(nplank)
      _RL kinhPAR(nplank)
#endif
      _RL mQyield(nplank)
      _RL chl2cmax(nplank)
      _RL grazemax(nplank)
      _RL kgrazesat(nplank)
      _RL palat(nplank,nplank)
      _RL asseff(nplank,nplank)
      _RL ExportFracPreyPred(nplank,nplank)

#ifdef GUD_ALLOW_RADTRANS
      COMMON /GUD_RADTRANS_TRAITS_r/
     &    aphy_chl,
     &    aphy_chl_ps,
     &    bphy_chl,
     &    bbphy_chl
      _RL aphy_chl(nPhoto,nlam)
      _RL aphy_chl_ps(nPhoto,nlam)
      _RL bphy_chl(nPhoto,nlam)
      _RL bbphy_chl(nPhoto,nlam)
#endif

      COMMON /GUD_DEPENDENT_TRAITS_i/
#ifdef GUD_ALLOW_RADTRANS
     &    ap_type,
#endif
     &    group,
     &    igroup
#ifdef GUD_ALLOW_RADTRANS
      INTEGER ap_type(nplank)
#endif
      INTEGER group(nplank)
      INTEGER igroup(nplank)
      COMMON /GUD_DEPENDENT_TRAITS_r/
#ifndef GUD_ALLOW_GEIDER
     &    normI,
#endif
     &    biovol,
     &    qcarbon,
     &    pp_opt,
     &    pp_sig,
     &    biovol_bygroup,
     &    alphachl,
     &    alpha_mean,
     &    chl2cmin,
     &    mortTempFuncMin,
     &    mort2TempFuncMin
#ifndef GUD_ALLOW_GEIDER
      _RL normI(nplank)
#endif
      _RL biovol(nplank)
      _RL qcarbon(nplank)
      _RL pp_opt(nplank)
      _RL pp_sig(nplank)
      _RL biovol_bygroup(nplank,ngroup)
      _RL alphachl(nplank,nlam)
      _RL alpha_mean(nplank)
      _RL chl2cmin(nplank)
      _RL mortTempFuncMin(nplank)
      _RL mort2TempFuncMin(nplank)

CCOG[[[end]]] (checksum: 13e6ffc647b4a3818fded6886dc2244d)

#endif /* ALLOW_GUD */

