#!/usr/bin/env python
import sys
from fortran import OrderedDict

# Each template is a list of (TMPL, SEP) tuples.
# If SEP is None, TMPL is copied once,
# if it is a string, it is expanded once for each line in exf.template,
# the results being joined by SEP.
# The replacement fields are given in each line of exf.template as
#
#   {fld} {pre}
#
templates = {
##############
'GUD_EXF.h': [
('''C $Header$
C $Name$

C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!!!!!!!!!!!! AUTOGENERATED FILE -- WILL BE OVERWRITTEN !!!!!!!!!!!!!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifdef ALLOW_GUD

CBOP
C     !ROUTINE: GUD_EXF.h
C     !INTERFACE:
C #include GUD_EXF.h

C     !DESCRIPTION:
C Contains fields for gud package read through exf
C
C Requires: SIZE.h
C Requires: EXF_PARAM.h
C Requires: GUD_SIZE.h

      COMMON/gud_forcing_params_l/
     &    usegudYearlyFields,
     &    gud_chlInitBalanced,
     &    gud_loadFieldsEarly

      LOGICAL usegudYearlyFields
      LOGICAL gud_chlInitBalanced
      LOGICAL gud_loadFieldsEarly

      COMMON/gud_forcing_params_i/
     &    gud_chlIter0

      INTEGER gud_chlIter0

      COMMON /gud_fields_r/
#ifdef ALLOW_RADTRANS
     &    OASIM_Ed0, OASIM_Ed1, OASIM_Ed,
     &    OASIM_Es0, OASIM_Es1, OASIM_Es,
#endif
''', None),
('     &    {pre}0, {pre}1, {fld}', ',\n') ,
('''
#ifdef ALLOW_RADTRANS
      _RL OASIM_Ed0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
      _RL OASIM_Ed1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
      _RL OASIM_Ed(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)

      _RL OASIM_Es0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
      _RL OASIM_Es1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
      _RL OASIM_Es(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
#endif
''', None),
('''
      _RL {pre}0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL {pre}1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL {fld}(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
''', '') ,
('''
#ifdef ALLOW_RADTRANS
C OASIM forcing parameters for exf

      _RL OASIMstartdate

      COMMON/gud_forcing_OASIM_c/
     &    OASIMmask, OASIM_EdFile, OASIM_EsFile
      COMMON/gud_forcing_OASIM_i/
     &    OASIMstartdate1, OASIMstartdate2
      COMMON/gud_forcing_OASIM_r/
     &    OASIMstartdate,
     &    OASIMperiod, OASIMconst,
     &    OASIM_exfremo_intercept, OASIM_exfremo_slope,
     &    gud_inscal_OASIM
      CHARACTER*128  OASIM_EdFile(nlam)
      CHARACTER*128  OASIM_EsFile(nlam)
      CHARACTER*1 OASIMmask
      INTEGER OASIMstartdate1
      INTEGER OASIMstartdate2
      _RL OASIMperiod
      _RL OASIMconst
      _RL OASIM_exfremo_intercept
      _RL OASIM_exfremo_slope
      _RL gud_inscal_OASIM(nlam)

#ifdef USE_EXF_INTERPOLATION
      COMMON/gud_interp_OASIM_i/
     &    OASIM_nlon, OASIM_nlat, OASIM_interpMethod
      COMMON/gud_interp_OASIM_r/
     &    OASIM_lon0, OASIM_lat0, OASIM_lon_inc, OASIM_lat_inc
      INTEGER OASIM_interpMethod, OASIM_nlon, OASIM_nlat
      _RL  OASIM_lon0
      _RL  OASIM_lat0
      _RL  OASIM_lon_inc
      _RL  OASIM_lat_inc(MAX_LAT_INC)
#endif
#endif
''', None),
('''
C {pre} forcing parameters for exf

      _RL {pre}startdate

      COMMON/gud_forcing_{pre}_c/
     &    {pre}mask, {pre}file
      COMMON/gud_forcing_{pre}_i/
     &    {pre}startdate1, {pre}startdate2
      COMMON/gud_forcing_{pre}_r/
     &    {pre}startdate,
     &    {pre}period, {pre}const,
     &    {pre}_exfremo_intercept, {pre}_exfremo_slope,
     &    gud_inscal_{pre}
      CHARACTER*128  {pre}file
      CHARACTER*1 {pre}mask
      INTEGER {pre}startdate1
      INTEGER {pre}startdate2
      _RL {pre}period
      _RL {pre}const
      _RL {pre}_exfremo_intercept
      _RL {pre}_exfremo_slope
      _RL gud_inscal_{pre}

#ifdef USE_EXF_INTERPOLATION
      COMMON/gud_interp_{pre}_i/
     &    {pre}_nlon, {pre}_nlat, {pre}_interpMethod
      COMMON/gud_interp_{pre}_r/
     &    {pre}_lon0, {pre}_lat0, {pre}_lon_inc, {pre}_lat_inc
      INTEGER {pre}_interpMethod, {pre}_nlon, {pre}_nlat
      _RL  {pre}_lon0
      _RL  {pre}_lat0
      _RL  {pre}_lon_inc
      _RL  {pre}_lat_inc(MAX_LAT_INC)
#endif
''', ''),
('''
CEOP
#endif /* ALLOW_GUD */
''', None)
],
#######################
'GUD_EXF_NAMELIST.h': [
('''C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!!!!!!!!!!!! AUTOGENERATED FILE -- WILL BE OVERWRITTEN !!!!!!!!!!!!!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      NAMELIST/gud_exf_params/
#ifdef ALLOW_RADTRANS
C
     &    OASIM_Edfile,
     &    OASIM_Esfile,
     &    OASIMstartdate1,
     &    OASIMstartdate2,
     &    OASIMperiod,
     &    OASIMconst,
     &    OASIM_exfremo_intercept,
     &    OASIM_exfremo_slope,
     &    OASIMmask,
     &    gud_inscal_OASIM,
#endif
''', None),
('''C
     &    {pre}file,
     &    {pre}startdate1,
     &    {pre}startdate2,
     &    {pre}period,
     &    {pre}const,
     &    {pre}_exfremo_intercept,
     &    {pre}_exfremo_slope,
     &    {pre}mask,
     &    gud_inscal_{pre}''', ',\n'),
('''
#ifdef USE_EXF_INTERPOLATION
      NAMELIST/gud_interp_params/
#ifdef ALLOW_RADTRANS
C
     &    OASIM_lon0,
     &    OASIM_lat0,
     &    OASIM_nlon,
     &    OASIM_nlat,
     &    OASIM_lon_inc,
     &    OASIM_interpMethod,
     &    OASIM_lat_inc
#endif
''', None),
('''C
     &    {pre}_lon0,
     &    {pre}_lat0,
     &    {pre}_nlon,
     &    {pre}_nlat,
     &    {pre}_lon_inc,
     &    {pre}_interpMethod,
     &    {pre}_lat_inc''', ',\n'),
('''#endif
''', None),
],
#######################
'GUD_EXF_DEFAULTS.h': [
('''C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!!!!!!!!!!!! AUTOGENERATED FILE -- WILL BE OVERWRITTEN !!!!!!!!!!!!!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifdef ALLOW_RADTRANS
      DO l = 1, nlam
       OASIM_Edfile(l) = ' '
       OASIM_Esfile(l) = ' '
       gud_inscal_OASIM(l) = 1. _d 0
      ENDDO
      OASIMstartdate1         = 0
      OASIMstartdate2         = 0
      OASIMperiod             = 0.0 _d 0
      OASIMconst              = 0.0 _d 0
      OASIM_exfremo_intercept = 0.0 _d 0
      OASIM_exfremo_slope     = 0.0 _d 0
      OASIMmask = 'c'
#endif
''', None),
('''
      {pre}file = ' '
      {pre}startdate1         = 0
      {pre}startdate2         = 0
      {pre}period             = 0.0 _d 0
      {pre}const              = 0.0 _d 0
      {pre}_exfremo_intercept = 0.0 _d 0
      {pre}_exfremo_slope     = 0.0 _d 0
      {pre}mask = 'c'

      gud_inscal_{pre}    =  1. _d 0
''', ''),
('''#ifdef USE_EXF_INTERPOLATION
      inp_lon0 = xgOrigin + delX(1)*exf_half
      inp_lat0 = ygOrigin + delY(1)*exf_half
      inp_dLon = delX(1)
      inp_dLat = delY(1)
# ifdef ALLOW_EXCH2
      gridNx = exch2_mydNx(1)
      gridNy = exch2_mydNy(1)
# else /* ALLOW_EXCH2 */
      gridNx = Nx
      gridNy = Ny
# endif /* ALLOW_EXCH2 */

#ifdef ALLOW_RADTRANS
      OASIM_lon0 = inp_lon0
      OASIM_lat0 = inp_lat0
      OASIM_nlon = gridNx
      OASIM_nlat = gridNy
      OASIM_lon_inc = inp_dLon
      OASIM_interpMethod  = 1
      OASIM_lat_inc(:) = inp_dLat
#endif
''', None),
('''
      {pre}_lon0 = inp_lon0
      {pre}_lat0 = inp_lat0
      {pre}_nlon = gridNx
      {pre}_nlat = gridNy
      {pre}_lon_inc = inp_dLon
      {pre}_interpMethod  = 1
      {pre}_lat_inc(:) = inp_dLat''', '\n'),
('''#endif /* USE_EXF_INTERPOLATION */
''', None),
],
#########################
'gud_exf_init_fixed.F': [
('''C $Header$
C $Name$

C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!!!!!!!!!!!! AUTOGENERATED FILE -- WILL BE OVERWRITTEN !!!!!!!!!!!!!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#include "GUD_OPTIONS.h"
#include "EXF_OPTIONS.h"

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
CBOP
C     !ROUTINE: GUD_EXF_INIT_FIXED

C     !INTERFACE:
      SUBROUTINE GUD_EXF_INIT_FIXED( myThid )

C     !DESCRIPTION:
C     Initialize GUD constants for exf field loading

C     !USES:
      IMPLICIT NONE
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "EXF_PARAM.h"
#include "GUD_SIZE.h"
#include "GUD_EXF.h"

C     !INPUT PARAMETERS:
      INTEGER myThid
CEOP

#ifdef ALLOW_GUD
#ifdef ALLOW_EXF

#ifdef ALLOW_RADTRANS
      IF ( OASIM_Edfile(1) .NE. ' ' .AND. OASIMperiod .GT. 0. ) THEN
# ifdef ALLOW_DEBUG
       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START OASIM',myThid)
# endif
       CALL EXF_GETFIELD_START( useGudYearlyFields,
     I                          OASIMstartdate1, OASIMstartdate2,
     O                          OASIMstartdate,
     I                          myThid )
      ENDIF
#endif
''', None),
('''
      IF ( {pre}file .NE. ' ' .AND. {pre}period .GT. 0. ) THEN
# ifdef ALLOW_DEBUG
       IF (debugMode) CALL DEBUG_CALL('GETFIELD_START {pre}',myThid)
# endif
       CALL EXF_GETFIELD_START( useGudYearlyFields,
     I                          {pre}startdate1, {pre}startdate2,
     O                          {pre}startdate,
     I                          myThid )
      ENDIF
''', ''),
('''
#endif /* ALLOW_EXF */
#endif /* ALLOW_GUD */

      RETURN
      END
''', None)
],
###################
'gud_exf_init_varia.F': [
('''C $Header$
C $Name$

C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!!!!!!!!!!!! AUTOGENERATED FILE -- WILL BE OVERWRITTEN !!!!!!!!!!!!!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#include "GUD_OPTIONS.h"
#include "EXF_OPTIONS.h"

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
CBOP
C     !ROUTINE: GUD_EXF_INIT_VARIA

C     !INTERFACE:
      SUBROUTINE GUD_EXF_INIT_VARIA( myThid )

C     !DESCRIPTION:
C     Initialize GUD constants

C     !USES:
      IMPLICIT NONE
#include "EEPARAMS.h"
#include "SIZE.h"
#include "GRID.h"
#include "PARAMS.h"
#ifdef ALLOW_EXF
#include "EXF_PARAM.h"
#endif
#ifdef ALLOW_GUD
#include "GUD_SIZE.h"
#include "GUD_EXF.h"
#endif

C     !INPUT PARAMETERS:
      INTEGER myThid
CEOP

#ifdef ALLOW_GUD
#ifdef ALLOW_EXF

      INTEGER l

C     these load constant forcing fields

#ifdef ALLOW_RADTRANS
      DO l = 1, nlam
       call exf_init_gen (
     &     OASIM_Edfile(l), OASIMperiod, gud_inscal_OASIM(l),
     &     OASIMmask, OASIMconst,
     &     OASIM_Ed(1-OLx,1-OLy,1,1,l),
     &     OASIM_Ed0(1-OLx,1-OLy,1,1,l),
     &     OASIM_Ed1(1-OLx,1-OLy,1,1,l),
#ifdef USE_EXF_INTERPOLATION
     &     OASIM_lon0, OASIM_lon_inc,
     &     OASIM_lat0, OASIM_lat_inc,
     &     OASIM_nlon, OASIM_nlat, xC, yC, OASIM_interpMethod,
#endif
     &     mythid )

       call exf_init_gen (
     &     OASIM_Esfile(l), OASIMperiod, gud_inscal_OASIM(l),
     &     OASIMmask, OASIMconst,
     &     OASIM_Es(1-OLx,1-OLy,1,1,l),
     &     OASIM_Es0(1-OLx,1-OLy,1,1,l),
     &     OASIM_Es1(1-OLx,1-OLy,1,1,l),
#ifdef USE_EXF_INTERPOLATION
     &     OASIM_lon0, OASIM_lon_inc,
     &     OASIM_lat0, OASIM_lat_inc,
     &     OASIM_nlon, OASIM_nlat, xC, yC, OASIM_interpMethod,
#endif
     &     mythid )
      ENDDO
#endif
''', None),
('''
      call exf_init_gen (
     &     {pre}file, {pre}period, gud_inscal_{pre}, {pre}mask,
     &     {pre}const, {fld}, {pre}0, {pre}1,
#ifdef USE_EXF_INTERPOLATION
     &     {pre}_lon0, {pre}_lon_inc,
     &     {pre}_lat0, {pre}_lat_inc,
     &     {pre}_nlon, {pre}_nlat, xC, yC, {pre}_interpMethod,
#endif
     &     mythid )
''', ''),
('''
      IF (gud_loadFieldsEarly) THEN
C       these load time-varying forcing fields
C       (usually done in gud_fields_load, but may be needed for chl)
#ifdef ALLOW_RADTRANS
       DO l = 1, nlam
        call exf_set_gen(
     &     OASIM_Edfile(l), OASIMstartdate, OASIMperiod,
     &     gud_inscal_OASIM(l),
     &     OASIM_exfremo_intercept, OASIM_exfremo_slope,
     &     OASIM_Ed(1-OLx,1-OLy,1,1,l),
     &     OASIM_Ed0(1-OLx,1-OLy,1,1,l),
     &     OASIM_Ed1(1-OLx,1-OLy,1,1,l),
     &     OASIMmask,
#ifdef USE_EXF_INTERPOLATION
     &     OASIM_lon0, OASIM_lon_inc,
     &     OASIM_lat0, OASIM_lat_inc,
     &     OASIM_nlon, OASIM_nlat, xC, yC, OASIM_interpMethod,
#endif
     &     starttime, nIter0, mythid )

        call exf_set_gen(
     &     OASIM_Esfile(l), OASIMstartdate, OASIMperiod,
     &     gud_inscal_OASIM(l),
     &     OASIM_exfremo_intercept, OASIM_exfremo_slope,
     &     OASIM_Es(1-OLx,1-OLy,1,1,l),
     &     OASIM_Es0(1-OLx,1-OLy,1,1,l),
     &     OASIM_Es1(1-OLx,1-OLy,1,1,l),
     &     OASIMmask,
#ifdef USE_EXF_INTERPOLATION
     &     OASIM_lon0, OASIM_lon_inc,
     &     OASIM_lat0, OASIM_lat_inc,
     &     OASIM_nlon, OASIM_nlat, xC, yC, OASIM_interpMethod,
#endif
     &     starttime, nIter0, mythid )
       ENDDO
#endif
''', None),
('''
        call exf_set_gen(
     &     {pre}file, {pre}startdate, {pre}period,
     &     gud_inscal_{pre},
     &     {pre}_exfremo_intercept, {pre}_exfremo_slope,
     &     {fld}, {pre}0, {pre}1, {pre}mask,
#ifdef USE_EXF_INTERPOLATION
     &     {pre}_lon0, {pre}_lon_inc,
     &     {pre}_lat0, {pre}_lat_inc,
     &     {pre}_nlon, {pre}_nlat, xC, yC, {pre}_interpMethod,
#endif
     &     starttime, nIter0, mythid )
''', ''),
('''       ENDIF
#endif /* ALLOW_EXF */
#endif /* ALLOW_GUD */

      RETURN
      END
''', None)
],
###################
'gud_exf_load.F': [
('''C $Header$
C $Name$

C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!!!!!!!!!!!! AUTOGENERATED FILE -- WILL BE OVERWRITTEN !!!!!!!!!!!!!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#include "GUD_OPTIONS.h"
#include "EXF_OPTIONS.h"

CBOP
C !ROUTINE: GUD_EXF_LOAD

C !INTERFACE: ==========================================================
      SUBROUTINE GUD_EXF_LOAD( mytime, myiter, mythid )

C !DESCRIPTION:
C     Load and interpolate forcing fields for gud package

C !USES: ===============================================================
      IMPLICIT NONE
#include "SIZE.h"
#include "GRID.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#ifdef ALLOW_EXF
#include "EXF_PARAM.h"
#endif
#ifdef ALLOW_GUD
#include "GUD_SIZE.h"
#include "GUD_EXF.h"
#endif

C !INPUT PARAMETERS: ===================================================
      _RL     mytime
      integer myiter
      integer mythid
CEOP

#ifdef ALLOW_GUD
#ifdef ALLOW_EXF

C !LOCAL VARIABLES: ====================================================
      INTEGER bi,bj,l

c--   read forcing fields from files and temporal interpolation

      IF (.NOT.(gud_loadFieldsEarly.AND.myiter.EQ.niter0)) THEN
#ifdef ALLOW_RADTRANS
       DO l = 1, nlam
        call exf_set_gen(
     &     OASIM_Edfile(l), OASIMstartdate, OASIMperiod,
     &     gud_inscal_OASIM(l),
     &     OASIM_exfremo_intercept, OASIM_exfremo_slope,
     &     OASIM_Ed(1-OLx,1-OLy,1,1,l),
     &     OASIM_Ed0(1-OLx,1-OLy,1,1,l),
     &     OASIM_Ed1(1-OLx,1-OLy,1,1,l),
     &     OASIMmask,
#ifdef USE_EXF_INTERPOLATION
     &     OASIM_lon0, OASIM_lon_inc,
     &     OASIM_lat0, OASIM_lat_inc,
     &     OASIM_nlon, OASIM_nlat, xC, yC, OASIM_interpMethod,
#endif
     &     mytime, myiter, mythid )

        call exf_set_gen(
     &     OASIM_Esfile(l), OASIMstartdate, OASIMperiod,
     &     gud_inscal_OASIM(l),
     &     OASIM_exfremo_intercept, OASIM_exfremo_slope,
     &     OASIM_Es(1-OLx,1-OLy,1,1,l),
     &     OASIM_Es0(1-OLx,1-OLy,1,1,l),
     &     OASIM_Es1(1-OLx,1-OLy,1,1,l),
     &     OASIMmask,
#ifdef USE_EXF_INTERPOLATION
     &     OASIM_lon0, OASIM_lon_inc,
     &     OASIM_lat0, OASIM_lat_inc,
     &     OASIM_nlon, OASIM_nlat, xC, yC, OASIM_interpMethod,
#endif
     &     mytime, myiter, mythid )
       ENDDO
#endif
''', None),
('''
       call exf_set_gen(
     &     {pre}file, {pre}startdate, {pre}period,
     &     gud_inscal_{pre},
     &     {pre}_exfremo_intercept, {pre}_exfremo_slope,
     &     {fld}, {pre}0, {pre}1, {pre}mask,
#ifdef USE_EXF_INTERPOLATION
     &     {pre}_lon0, {pre}_lon_inc,
     &     {pre}_lat0, {pre}_lat_inc,
     &     {pre}_nlon, {pre}_nlat, xC, yC, {pre}_interpMethod,
#endif
     &     mytime, myiter, mythid )
''', ''),
('''      ENDIF

#endif /* ALLOW_EXF */
#endif /* ALLOW_GUD */

      RETURN
      END
''', None)
]}
####################


flds = OrderedDict()
for line in sys.stdin:
    try:
        fld,pre = line.rstrip().split()
    except ValueError:
        if len(line.rstrip()) > 0:
            sys.exit('ERROR: this line is not of the form "field prefix": {0}\n'.format(line.rstrip()))
    else:
        flds[pre] = fld


for fname,tmpls in templates.items():
    sys.stderr.write('{0}\n'.format(fname))
    with open(fname, "w") as f:
        for tmpl,sep in tmpls:
            if sep is None:
                f.write(tmpl)
            else:
                f.write(sep.join(tmpl.format(pre=pre, fld=fld) for pre,fld in flds.items()) + '\n')

